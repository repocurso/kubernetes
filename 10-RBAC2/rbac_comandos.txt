------------------------------------------------
Usuarios y Grupos - OS
------------------------------------------------

$ sudo addgroup -gid 1100 developers
$ sudo useradd -u 1014 -g developers -s /bin/bash -m user1
$ sudo passwd user1

------------------------------------------------
Usuarios y Grupos - Private Key y CSR
------------------------------------------------

$ mkdir ~/cert && cd ~/cert 

-- Private KEY
$ openssl genrsa -out user1.key 2048

-- Certificate Signing Request (CSR)
$ openssl req -new -key user1.key -out user1.csr -subj "/CN=user1/O=developers"

$ chmod 644 *; ls -l | awk '{print $1, $9}' 

------------------------------------------------
Usuarios y Grupos - CRT
------------------------------------------------

$ sudo cp /etc/kubernetes/pki/ca.* ~/cert/
$ sudo chown --reference=$HOME/cert ~/cert/ca.*
$ openssl x509 -req -in user1.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out user1.crt -days 500
$ ls

------------------------------------------------
Usuarios y Grupos - OS
------------------------------------------------

$ sudo mkdir /home/user1/cert

$ sudo cp user1.crt user1.key /home/user1/cert/

$ sudo chown -R --reference=/home/user1/ /home/user1/cert/

$ ls -l /home/user1/cert | awk '{print $1, $3, $4, $9}' 

------------------------------------------------
Configuración de kubeconfig - Usuarios
------------------------------------------------

$ kubectl config set-credentials user1 --client-certificate=/home/user1/cert/user1.crt --client-key=/home/user1/cert/user1.key

$ kubectl config get-users

$ kubectl config view

------------------------------------------------
Configuración de kubeconfig - Context
------------------------------------------------

$ kubectl config set-context developers-context --cluster=kubernetes --user=user1

$ kubectl config get-contexts

$ kubectl config view

--

$ kubectl config current-context 

$ kubectl config use-context developers-context 

$ kubectl config current-context 

$ kubectl config get-contexts

------------------------------------------------
Configuración de kubeconfig
------------------------------------------------

--- Terminal del usuario
$ mkdir $HOME/.kube

$ kubectl config view

--- Terminal del administrador
$ sudo cp ~/.kube/config /home/user1/.kube/config

$ sudo chown --reference=/home/user1/ /home/user1/.kube/config
$ export KUBECONFIG="$HOME/.kube/config"

$ echo $KUBECONFIG 

--- Terminal del usuario
$ export KUBECONFIG="$HOME/.kube/config"

$ echo $KUBECONFIG 
 /home/user1/.kube/config

$ kubectl version

$ kubectl config view

------------------------------------------------
Acceso a los objetos de Kubernetes
------------------------------------------------

--- Terminal del usuario
$ kubectl get pods --namespace proyecto1

------------------------------------------------
Comprobación del acceso a la API
------------------------------------------------

$ kubectl config current-context
$ kubectl auth can-i list pods

$ kubectl config use-context developers-context 
$ kubectl auth can-i list pods

--

$ kubectl config current-context
$ kubectl auth can-i list pods
$ kubectl auth can-i list pods --context developers-context 
$ kubectl auth can-i list pods --namespace proyecto2 --as system:serviceaccount:proyecto1:api-access1

------------------------------------------------
Creación de un Role
------------------------------------------------

$ kubectl create role pod-reader1 --verb=watch,list,get --resource=pods --namespace=proyecto1
$ kubectl get role pod-reader1 --namespace=proyecto1

--

$ cat role_pod-reader2.yml 
apiVersion: rbac.authorization.k8s.io/v1 
kind: Role 
metadata: 
  name: pod-reader2 
  namespace: proyecto1
rules: 
- apiGroups: [""] 
  resources: ["pods"] 
  verbs: ["watch","list","get"]

$ kubectl apply -f role_pod-reader2.yml 

------------------------------------------------
Creación de un RoleBinding
------------------------------------------------

$ kubectl create rolebinding read-pods1 -n proyecto1 --user=user1 --role=pod-reader1
$ kubectl get rolebinding read-pods1 

--

$ cat rb_read-pods2.yml 
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-pods2
  namespace: proyecto1
subjects:
  - kind: User
    name: user1
    apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: pod-reader2
  apiGroup: rbac.authorization.k8s.io

$ kubectl apply -f rb_read-pods2.yml 
$ kubectl get rolebinding read-pods1 read-pods2


------------------------------------------------
Ejecución de operaciones con el usuario
------------------------------------------------

$ kubectl auth can-i list pods --namespace proyecto1 --context developers-context 
$ kubectl auth can-i create pods --namespace proyecto1 --context developers-context 
$ kubectl get pods -n proyecto1 --context developers-context
$ kubectl get pods -n proyecto2 --context developers-context

------------------------------------------------
Service Account
------------------------------------------------

$ kubectl get serviceaccounts --namespace kube-public
$ kubectl describe serviceaccount default
$ kubectl get sa default -o yaml
$ kubectl describe secret default-token-wqfgg

------------------------------------------------
Creación de un Service Account
------------------------------------------------

$ kubectl create serviceaccount api-access1 -n proyecto1

$ cat sc_api-access2.yaml
apiVersion: v1 
kind: ServiceAccount 
metadata: 
  name: api-access2 
  namespace: proyecto1

$ kubectl apply -f sc_api-access2.yaml

$ kubectl get serviceaccounts -n proyecto1

------------------------------------------------
Creación de un ClusterRole
------------------------------------------------

$ kubectl create clusterrole api-clusterrole1 --verb=watch,list,get --resource=pods

$ kubectl get clusterrole api-clusterrole1 

--

$ cat cr_api-clusterrole2.yml 
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: api-clusterrole2
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.curso.com/aggregate: "true"
rules: []
 
$ kubectl apply -f cr_api-clusterrole2.yml 

$ kubectl describe clusterrole api-clusterrole1 api-clusterrole2 

------------------------------------------------
Creación de un Aggregated ClusterRole
------------------------------------------------

$ kubectl get clusterrole api-clusterrole2 -o yaml

$ cat cr2-agg1.yml 
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: api-clusterrole2-agg1
  labels:
    rbac.curso.com/aggregate: "true"
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

$ kubectl apply -f cr2-agg1.yml
$ kubectl describe clusterrole api-clusterrole2 

--

$ cat cr2-agg2.yml 
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: api-clusterrole2-agg2
  labels:
    rbac.curso.com/aggregate: "true"
rules: 
  - apiGroups: [""]
    resources: ["pods/exec"]
    verbs: ["create"]

$ kubectl apply -f cr2-agg2.yml
$ kubectl describe clusterrole api-clusterrole2 

------------------------------------------------
Creación de un ClusterRoleBinding
------------------------------------------------

$ kubectl create clusterrolebinding api-clusterrolebinding1 --serviceaccount=proyecto1:api-access1 --clusterrole=api-clusterrole1

$ kubectl get clusterrolebinding api-clusterrolebinding1 

--

$ cat crb_api-clusterrolebinding2.yml
apiVersion: rbac.authorization.k8s.io/v1 
kind: ClusterRoleBinding 
metadata: 
  name: api-clusterrolebinding2
roleRef: 
  apiGroup: rbac.authorization.k8s.io 
  kind: ClusterRole 
  name: api-clusterrole2 
subjects: 
- apiGroup: "" 
  kind: ServiceAccount 
  name: api-access1 
  namespace: proyecto1

$ kubectl apply -f crb_api-clusterrolebinding2.yml
$ kubectl get clusterrolebinding api-clusterrolebinding1 api-clusterrolebinding2

------------------------------------------------
Uso de un ServiceAccount en un Pod
------------------------------------------------

$ kubectl run pod-operator --image=nginx:latest --restart=Never --port=80 -n proyecto1 --serviceaccount=api-access1
$ kubectl run pod-operator --image=nginx:latest --restart=Never --port=80 -n proyecto1 --overrides='{"spec":{"serviceAccountName":"api-access1"}}'

$ kubectl run pod-test --image=nginx:latest --restart=Never --port=80 -n proyecto2

-- Ejemplo de archivo YAML
apiVersion: v1 
kind: Pod 
metadata: 
  name: pod-operator 
  namespace: proyecto1
spec: 
  serviceAccountName: api-access1
  containers: 
  - name: operator 
    image: nginx:latest 
    ports: 
    - containerPort: 80 
--- 
apiVersion: v1 
kind: Pod 
metadata: 
  name: pod-test
  namespace: proyecto2
spec: 
  containers: 
  - name: test
    image: nginx:latest
    ports: 
    - containerPort: 80 

------------------------------------------------
Verificación de los permisos
------------------------------------------------

$ kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}'

$ kubectl get secret $(kubectl get serviceaccount api-access1 -n proyecto1 -o jsonpath='{.secrets[0].name}') -o jsonpath='{.data.token}' -n proyecto1 | base64 --decode

$ kubectl exec pod-operator -n proyecto1 -- curl https://192.168.100.10:6443/api/v1/namespaces/proyecto2/pods --header "Authorization: Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6In..." --insecure

$ kubectl exec pod-operator -n proyecto1 -- curl -X DELETE https://192.168.100.10:6443/api/v1/namespaces/proyecto2/pods/pod-test --header "Authorization: Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6In..." --insecure





